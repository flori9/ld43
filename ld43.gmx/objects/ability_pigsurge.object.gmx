<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_pigsurge</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>par_ability</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///inherited, own
event_inherited();

image_speed = 0.3333;

stage = 0;
stagesub = 0;
pigSprite = -1;
downSpeed = 0;
pig_alpha = 1;
actuallyDoneDamage = false;

abilityDamage = 7;
damageMessage = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fly towards pig or surge to target
if (stage == 1) {
    var toX = scene_get_x(pigToFlyTo) + iif(myAlignment == alignment_other, 16, 8);
    x = lerp(xstart, toX, smooth_step(stagesub));
    
    stagesub += 2 / abs(toX - xstart);
    if (stagesub &gt;= 1) {
        stagesub = 0;
        stage += 1;
        pigSprite = pigToFlyTo[? "sprite"];
        pigTransform = scene_get_xtransform(pigToFlyTo);
        pigRelX = scene_get_x(pigToFlyTo) - x;
        pigRelY = scene_get_y(pigToFlyTo) - y;
        scene_destroy_character(pigToFlyTo, false);
        toY = y - tileHeight * 2.5;
    }
}
else if (stage == 2) {
    y = lerp(ystart, toY, smooth_step(stagesub));
    if (stagesub &gt;= 2 / 3) {
        image_alpha = (1 - stagesub) * 3;
        pig_alpha = (1 - stagesub) * 3;
    } else if (stagesub &gt;= 1 / 3 &amp;&amp; random(1) &lt; 0.4) {
        with (instance_create(x + pigRelX + irandom_range(5, 11), y + pigRelY + irandom_range(14, 18), obj_ability_part_pigsurgedrop)) {
            speed = 4;
            targetx = scene_get_x(other.target) + other.target[? "centerx"];
            targety = scene_get_y(other.target) + other.target[? "centery"];
            target = other.target;
        }
    }
    
    if (stagesub &gt;= 3 / 4 &amp;&amp; !actuallyDoneDamage &amp;&amp; !instance_exists(obj_ability_part_pigsurgedrop)) {
        var targetName = target[? "name"];
        targetHeSheIt = target[? "heSheIt"];
        
        var dmgResult = character_do_damage(target, 6);
        targetEradicated = dmgResult[1];
        damageMessage = fromCharacter[? "name"] + " sacrificed a pig, which dealt " + string(floor(dmgResult[0])) + " damage to " + targetName + ".";
        if (targetEradicated)
            damageMessage += " " + string_capitalize_first(targetHeSheIt) + " has now been defeated!";

        actuallyDoneDamage = true;
    }
    
    stagesub = min(stagesub + 0.01, 1);
    if (stagesub &gt;= 1 &amp;&amp; actuallyDoneDamage &amp;&amp; !instance_exists(obj_ability_part_pigsurgedrop)) {
        stagesub = 0;
        stage += 1;
        xstart = x;
        

        combat_show_result_message(damageMessage, fromCharacter);
        instance_destroy();
        if (! targetEradicated) {
            target[? "damageAnim"] = 1;
            target[? "damageAnimStopping"] = true;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Continue stage
if (stage == 0) {
    image_index = image_number - 1;
    image_speed = 0;
    stage = 1;
    pigToFlyTo = scene_find_identifier("pig", fromCharacter[? "alignment"], true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (stage &gt;= 2) {
    draw_sprite_ext(pigSprite, 0, x + pigRelX + iif(pigTransform == -1, tileWidth, 0), y + pigRelY, pigTransform, 1, 0, c_white, pig_alpha);   
}
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
