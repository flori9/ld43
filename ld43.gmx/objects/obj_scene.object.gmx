<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Vars
drawAtY = 72;
groundY = 72 + tileHeight;
numberOfPositions = room_width / tileWidth;
positionList = ds_list_create();
targetEradicated = false;
for (var i = 0; i &lt; numberOfPositions; i++)
    ds_list_add_list(positionList, ds_list_create());

scene_add_character_you(character_get("Pig"));
scene_add_character_you(character_get("Pig"));
scene_add_character_you(character_get("Pig"));
scene_add_character_you(character_get("Inugor"));
scene_add_character_you(character_get("Tom"));
scene_add_character_other(character_get("Pig"));
scene_add_character_other(character_get("Pig"));
scene_add_character_other(character_get("Pig"));
scene_add_character_other(character_get("Farmer"));
scene_add_character_other(character_get("Runar"));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clean up
ds_list_destroy(positionList);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle step for everything
for (var i = 0; i &lt; obj_scene.numberOfPositions; i++) {
    var chars = obj_scene.positionList[| i];
    for (var j = 0; j &lt; ds_list_size(chars); j++) {
        var char = chars[| j];
        
        if (char[? "damageAnimStopping"] &amp;&amp; char[? "damageAnim"] &gt; 0)
            char[? "damageAnim"] = max(char[? "damageAnim"] - 0.05, 0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Actually draw the scene
for (var i = 0; i &lt; numberOfPositions; i++) {
    var thisPosList = positionList[|i];
    for (var j = 0; j &lt; ds_list_size(thisPosList); j++) {
        var pos = thisPosList[| j];
        var isRotated = pos[? "alignment"] == alignment_other;
        
        script_execute(pos[? "drawer"], pos, i, isRotated, pos[? "drawerarg"]);
        
        
        draw_set_font(fnt_tinier);
        // 209, 101, 101
        draw_set_color(make_color_rgb(56 * 2, 50 * 2, 44 * 2)); //make_color_rgb(166, 49, 49)
        draw_panel_sprite(i * tileWidth + 1, groundY + 2, tileWidth - 2, 11, spr_healthbar, 0);
        draw_panel_sprite(i * tileWidth + 1, groundY + 2, floor((tileWidth - 2) * (pos[? "hp"] / pos[? "maxHP"])), 11, spr_healthbar, 1);
        draw_sprite(spr_heart, 0, i * tileWidth + 3, groundY + 4);
        
        draw_set_halign(fa_center);
        //draw_sprite(spr_healthorb, 0, i * tileWidth + tileWidth / 2, groundY + 3 + 4);
        //draw_text(i * tileWidth + tileWidth / 2, groundY + 3, string(floor(pos[? "hp"])));
        draw_set_halign(fa_right);
        draw_text(i * tileWidth + tileWidth - 3, groundY + 4, string(floor(pos[? "hp"])));
        draw_set_halign(fa_left);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
